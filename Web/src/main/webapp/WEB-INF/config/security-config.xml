<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:security="http://www.springframework.org/schema/security"
	   xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-2.0.2.xsd">
<!--todo create unit tests for verifying security functions-->
	<!-- Configure Spring Security -->
	<security:http auto-config="true">
		<security:form-login login-page="/spring/login" login-processing-url="/spring/loginProcess" default-target-url="/spring/about" authentication-failure-url="/spring/login?login_state=1"/>
		<security:logout logout-url="/spring/logout" logout-success-url="/spring/login?login_state=2"/>
	</security:http>

	<!--
		Define local authentication provider, a real app would use an external provider (JDBC, LDAP, CAS, etc)

		usernames/passwords are:
			mama/123
	-->
        <security:authentication-provider>
            <security:password-encoder hash="md5"/>
<!--
            <security:user-service>
                <security:user name="mama" password="202cb962ac59075b964b07152d234b70" authorities="ROLE_ADMIN"/>
            </security:user-service>
-->
            <!--todo this is really ugly... Who do we use hibernate???-->
            <security:jdbc-user-service data-source-ref="dataSource" 
                                        users-by-username-query="SELECT LOGIN, PASSWORD, ENABLED FROM CLIENT WHERE LOGIN=?" 
                                        authorities-by-username-query="SELECT C.LOGIN, A.ROLE FROM CLIENT C LEFT JOIN AUTHORITY A ON C.ID=A.CLIENT_ID WHERE C.LOGIN=?"/>

        </security:authentication-provider>

</beans>