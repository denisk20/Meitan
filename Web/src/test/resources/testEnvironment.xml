<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="
	   http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	   ">

	<context:component-scan base-package="com.meitan.lubov.services"/>
	<!-- Instructs Spring to perform declarative transaction management on annotated classes -->
	<tx:annotation-driven/>

	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${hibernate.connection.driver_class}"/>
		<property name="url" value="${hibernate.connection.url}"/>
		<property name="username" value="${hibernate.connection.username}"/>
		<property name="password" value="${hibernate.connection.password}"/>
	</bean>

	<!-- Drives transactions using local JPA APIs -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>

	<!-- Creates a EntityManagerFactory for use with the Hibernate JPA provider and a simple in-memory data source populated with test data -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <!--todo next properties can't be removed, otherwise unit tests can't use DB. This worse investigating-->
				<prop key="hibernate.connection.url">${hibernate.connection.url}</prop>
				<prop key="hibernate.connection.driver_class">${hibernate.connection.driver_class}</prop>
				<prop key="hibernate.connection.username">${hibernate.connection.username}</prop>
				<prop key="hibernate.connection.password">${hibernate.connection.password}</prop>
				<prop key="hibernate.default_schema">${hibernate.default_schema}</prop>
			</props>
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
		</property>
		<property name="persistenceUnitManager">
			<bean class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager">
				<property name="persistenceXmlLocation" value="file:${MEITAN_HOME}/Web/src/main/resources/META-INF/persistence.xml"/>
<!--
				<property name="resourceLoader">
					<bean class="org.springframework.core.io.FileSystemResource">
						<constructor-arg index="0" value="file:${MEITAN_PROPS}/hibernate.properties"/>
					</bean>
				</property>
-->
			</bean>
		</property>
	</bean>

	<bean id="customEditorConfigurer"
		  class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="customEditors">
			<map>
				<entry key="java.util.Date">
					<bean class="org.springframework.beans.propertyeditors.CustomDateEditor">
						<constructor-arg index="0">
							<bean class="java.text.SimpleDateFormat">
								<constructor-arg value="MM/dd/yy"/>
							</bean>
						</constructor-arg>
						<constructor-arg index="1" value="false"/>
					</bean>
				</entry>
			</map>
		</property>
	</bean>

	<bean id="propertyConfigurer"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_FALLBACK"/>
		<property name="searchSystemEnvironment" value="true"/>
		<property name="locations">
			<bean class="org.springframework.core.io.UrlResource" depends-on="propertyConfigurer">
				<constructor-arg>
					<value>file:#{T(java.lang.System).getenv().get('MEITAN_PROPS')}/hibernate.properties</value>
				</constructor-arg>
			</bean>
			<!--<value>file:${MEITAN_PROPS}/hibernate.properties</value>-->
		</property>
	</bean>

    <!-- DAOs======================================================================================-->
    <bean id="testImageDao" class="com.meitan.lubov.services.dao.jpa.impl.JpaImageDao"/>

    <bean id="testCategoryDao" class="com.meitan.lubov.services.dao.jpa.impl.JpaCategoryDao">
        <property name="imageDao" ref="testImageDao"/>
    </bean>

    <bean id="testProductDao" class="com.meitan.lubov.services.dao.jpa.impl.JpaProductDao">
        <property name="imageDao" ref="testImageDao"/>
        <property name="categoryDao" ref="testCategoryDao"/>
    </bean>

    <bean id="utils" class="com.meitan.lubov.services.util.Utils"/>
    <bean id="fileUploadHandler" class="com.meitan.lubov.services.util.FileUploadHandler">
        <property name="uploadPath" value="#{utils.imageUploadDirectoryPath}"/>
    </bean>

    <bean id="testBuyingActDao" class="com.meitan.lubov.services.dao.jpa.impl.JpaBuyingActDao"/>

    <bean id="testClientDao" class="com.meitan.lubov.services.dao.jpa.impl.JpaClientDao">
        <property name="buyingActDao" ref="testBuyingActDao"/>
    </bean>

    <bean id="testShoppingCartItemDao" class="com.meitan.lubov.services.dao.jpa.impl.JpaShoppingCartItemDao"/>

    <bean id="testAuthorityDao" class="com.meitan.lubov.services.dao.jpa.impl.JpaAuthorityDao"/>

    <bean id="testNewsBoardDao" class="com.meitan.lubov.services.dao.jpa.impl.JpaNewsBoardDao"/>

    <bean id="testBoardItemDao" class="com.meitan.lubov.services.dao.jpa.impl.JpaBoardItemDao"/>
    <!-- /DAOs======================================================================================-->

    <!-- Mail settings===========================================================================-->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="mail.meitan-kh.com"/>
        <property name="username" value="admin@meitan-kh.com"/>
        <property name="password" value="adm1n!"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.debug">true</prop>
                <prop key="mail.smtp.socketFactory.port">465</prop>
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                <prop key="mail.smtp.socketFactory.fallback">false</prop>
            </props>
        </property>
    </bean>

    <!-- this is a template message that we can pre-load with default state -->
    <bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
        <property name="from" value="admin@meitan-kh.com"/>
        <property name="subject" value="Your order"/>
    </bean>
    <!-- /Mail settings===========================================================================-->

</beans>